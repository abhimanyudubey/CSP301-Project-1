/*
 * Physics.hpp
 *
 *  Created on: Aug 11, 2013
 *      Author: abhimanyu
 */
#include <GL/glut.h>
#include "glm1/glm.hpp"
#include "glm/glm.h"
#include "TerrainRenderer.hpp"

//Global definitions for environment in physics.

#define PI 3.14159f

#define X_AXIS glm::vec3(1.0f,0.0f,0.0f)
#define Y_AXIS glm::vec3(0.0f,1.0f,0.0f)
#define Z_AXIS glm::vec3(0.0f,0.0f,1.0f)

#define OBJ_ACC 0.03f
#define OBJ_HEIGHT_RET 0.009f
#define OBJ_RET 0.09f
#define OBJ_MU 0.002f

#define DELTA_ANGLE 0.5f

#define GLOBAL_SCALE 1.0f

void initPhysics(){
	glScalef(GLOBAL_SCALE,GLOBAL_SCALE,GLOBAL_SCALE);

}
//Function to initialize the Physics engine.

void updateCameraPhysics(Camera* camera, Terrain* _terrain){
	//Updating location so that it remains within terrain.
	glm::vec2 location  = camera->planarLocation;
	float maxLength = _terrain->getLength()*GLOBAL_SCALE;
	float maxWidth = _terrain->getWidth()*GLOBAL_SCALE;

	if (location[0] > maxLength -3){
		camera->planarLocation[0]=maxLength-3;
	}

	if (location[1] > maxWidth -3){
		camera->planarLocation[1]=maxWidth-3;
	}

	if (location[0] < 3){
		camera->planarLocation[0]=3;
	}

	if (location[1] < 3){
		camera->planarLocation[1]=3;
	}
	int newloc1 = ceil(location[0]);
	int newloc2 = ceil(location[1]);
	float locHeight = _terrain->getHeight(newloc1,newloc2);

	float speed = camera->speed;
	//Adding slope friction
	glm::vec2 cameraNewOrientation = camera->cameraOrientation;
	glm::vec2 newlocation = camera->planarLocation+(cameraNewOrientation);
	newlocation[0] = ceil(newlocation[0]);
	newlocation[1] = ceil(newlocation[1]);
	float newht = _terrain->getHeight((int)newlocation[0],(int)newlocation[1]);
	float avght = _terrain->getAverageHeight();

	speed+=(locHeight-newht)/avght*OBJ_HEIGHT_RET;

	//Adding ground friction
	speed-=OBJ_MU;

	if(speed < 0){
		speed = 0;
	}

	camera->speed = speed;
}
